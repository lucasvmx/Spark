name: Build

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  build-x64:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        
    - name: Run autorevision
      working-directory: 3rdparty\libhack
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/Autorevision/autorevision/master/autorevision.sh -o autorevision.sh
        chmod +x autorevision.sh
        bash ./autorevision.sh -t h > autorevision.h
        stat autorevision.h
        
    - name: Generate makefiles (libhack)
      working-directory: 3rdparty\libhack
      run: cmake -G "MinGW Makefiles" -B build
    
    - name: Bulid (libhack)
      working-directory: 3rdparty\libhack
      run: make -C build

    - name: Copy output files
      shell: bash
      working-directory: 3rdparty/libhack/build
      run: |
        mkdir ../../../BUILD
        mv libhack.dll.a libhack.a
        mv libhack.dll libhack.a ../../../BUILD

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.12.2
      with:
        arch: win64_mingw81
        
    - name: Print Variables
      shell: bash
      run: echo "current folder is $PWD"
    - name: Generate Makefiles
      shell: bash
      run: qmake qt/Spark.pro -spec win32-g++ "CONFIG+=debug" "CONFIG+=qml_debug" -o build
    - name: Build
      shell: bash
      run: |
        make -f build/Makefile qmake_all
        make -C build -j4
  
  analyse-code:
    name: Run code analysys
    runs-on: windows-latest
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-windows.zip
        run: |
          New-Item -Force -ItemType directory -Path $HOME\.sonar
          curl -sSLo $HOME\.sonar\sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\sonar-scanner.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-windows\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-win-x86.zip
        run: |
          curl -sSLo $HOME\.sonar\build-wrapper.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\build-wrapper.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\build-wrapper-win-x86" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Run build-wrapper
        run: |
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

